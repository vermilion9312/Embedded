
dryer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001868  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001974  08001974  00002974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019a0  080019a0  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  080019a0  080019a0  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019a0  080019a0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019a0  080019a0  000029a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080019a4  080019a4  000029a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080019a8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  080019b4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080019b4  000030ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000823c  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001633  00000000  00000000  0000b271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0000c8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000654  00000000  00000000  0000d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e4a  00000000  00000000  0000d73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bbd  00000000  00000000  00024586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008368c  00000000  00000000  0002e143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b17cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d4  00000000  00000000  000b1814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000b38e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800195c 	.word	0x0800195c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800195c 	.word	0x0800195c

0800014c <init_fnd>:
#define LOW 0

uint8_t _LED_0F[29];

void init_fnd()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	_LED_0F[0] = 0xC0; //0
 8000150:	4b2d      	ldr	r3, [pc, #180]	@ (8000208 <init_fnd+0xbc>)
 8000152:	22c0      	movs	r2, #192	@ 0xc0
 8000154:	701a      	strb	r2, [r3, #0]
	_LED_0F[1] = 0xF9; //1
 8000156:	4b2c      	ldr	r3, [pc, #176]	@ (8000208 <init_fnd+0xbc>)
 8000158:	22f9      	movs	r2, #249	@ 0xf9
 800015a:	705a      	strb	r2, [r3, #1]
	_LED_0F[2] = 0xA4; //2
 800015c:	4b2a      	ldr	r3, [pc, #168]	@ (8000208 <init_fnd+0xbc>)
 800015e:	22a4      	movs	r2, #164	@ 0xa4
 8000160:	709a      	strb	r2, [r3, #2]
	_LED_0F[3] = 0xB0; //3
 8000162:	4b29      	ldr	r3, [pc, #164]	@ (8000208 <init_fnd+0xbc>)
 8000164:	22b0      	movs	r2, #176	@ 0xb0
 8000166:	70da      	strb	r2, [r3, #3]
	_LED_0F[4] = 0x99; //4
 8000168:	4b27      	ldr	r3, [pc, #156]	@ (8000208 <init_fnd+0xbc>)
 800016a:	2299      	movs	r2, #153	@ 0x99
 800016c:	711a      	strb	r2, [r3, #4]
	_LED_0F[5] = 0x92; //5
 800016e:	4b26      	ldr	r3, [pc, #152]	@ (8000208 <init_fnd+0xbc>)
 8000170:	2292      	movs	r2, #146	@ 0x92
 8000172:	715a      	strb	r2, [r3, #5]
	_LED_0F[6] = 0x82; //6
 8000174:	4b24      	ldr	r3, [pc, #144]	@ (8000208 <init_fnd+0xbc>)
 8000176:	2282      	movs	r2, #130	@ 0x82
 8000178:	719a      	strb	r2, [r3, #6]
	_LED_0F[7] = 0xF8; //7
 800017a:	4b23      	ldr	r3, [pc, #140]	@ (8000208 <init_fnd+0xbc>)
 800017c:	22f8      	movs	r2, #248	@ 0xf8
 800017e:	71da      	strb	r2, [r3, #7]
	_LED_0F[8] = 0x80; //8
 8000180:	4b21      	ldr	r3, [pc, #132]	@ (8000208 <init_fnd+0xbc>)
 8000182:	2280      	movs	r2, #128	@ 0x80
 8000184:	721a      	strb	r2, [r3, #8]
	_LED_0F[9] = 0x90; //9
 8000186:	4b20      	ldr	r3, [pc, #128]	@ (8000208 <init_fnd+0xbc>)
 8000188:	2290      	movs	r2, #144	@ 0x90
 800018a:	725a      	strb	r2, [r3, #9]
	_LED_0F[10] = 0x88; //A
 800018c:	4b1e      	ldr	r3, [pc, #120]	@ (8000208 <init_fnd+0xbc>)
 800018e:	2288      	movs	r2, #136	@ 0x88
 8000190:	729a      	strb	r2, [r3, #10]
	_LED_0F[11] = 0x83; //b
 8000192:	4b1d      	ldr	r3, [pc, #116]	@ (8000208 <init_fnd+0xbc>)
 8000194:	2283      	movs	r2, #131	@ 0x83
 8000196:	72da      	strb	r2, [r3, #11]
	_LED_0F[12] = 0xC6; //C
 8000198:	4b1b      	ldr	r3, [pc, #108]	@ (8000208 <init_fnd+0xbc>)
 800019a:	22c6      	movs	r2, #198	@ 0xc6
 800019c:	731a      	strb	r2, [r3, #12]
	_LED_0F[13] = 0xA1; //d
 800019e:	4b1a      	ldr	r3, [pc, #104]	@ (8000208 <init_fnd+0xbc>)
 80001a0:	22a1      	movs	r2, #161	@ 0xa1
 80001a2:	735a      	strb	r2, [r3, #13]
	_LED_0F[14] = 0x86; //E
 80001a4:	4b18      	ldr	r3, [pc, #96]	@ (8000208 <init_fnd+0xbc>)
 80001a6:	2286      	movs	r2, #134	@ 0x86
 80001a8:	739a      	strb	r2, [r3, #14]
	_LED_0F[15] = 0x8E; //F
 80001aa:	4b17      	ldr	r3, [pc, #92]	@ (8000208 <init_fnd+0xbc>)
 80001ac:	228e      	movs	r2, #142	@ 0x8e
 80001ae:	73da      	strb	r2, [r3, #15]
	_LED_0F[16] = 0xC2; //G
 80001b0:	4b15      	ldr	r3, [pc, #84]	@ (8000208 <init_fnd+0xbc>)
 80001b2:	22c2      	movs	r2, #194	@ 0xc2
 80001b4:	741a      	strb	r2, [r3, #16]
	_LED_0F[17] = 0x89; //H
 80001b6:	4b14      	ldr	r3, [pc, #80]	@ (8000208 <init_fnd+0xbc>)
 80001b8:	2289      	movs	r2, #137	@ 0x89
 80001ba:	745a      	strb	r2, [r3, #17]
	_LED_0F[18] = 0xF9; //I
 80001bc:	4b12      	ldr	r3, [pc, #72]	@ (8000208 <init_fnd+0xbc>)
 80001be:	22f9      	movs	r2, #249	@ 0xf9
 80001c0:	749a      	strb	r2, [r3, #18]
	_LED_0F[19] = 0xF1; //J
 80001c2:	4b11      	ldr	r3, [pc, #68]	@ (8000208 <init_fnd+0xbc>)
 80001c4:	22f1      	movs	r2, #241	@ 0xf1
 80001c6:	74da      	strb	r2, [r3, #19]
	_LED_0F[20] = 0xC3; //L
 80001c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000208 <init_fnd+0xbc>)
 80001ca:	22c3      	movs	r2, #195	@ 0xc3
 80001cc:	751a      	strb	r2, [r3, #20]
	_LED_0F[21] = 0xA9; //n
 80001ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000208 <init_fnd+0xbc>)
 80001d0:	22a9      	movs	r2, #169	@ 0xa9
 80001d2:	755a      	strb	r2, [r3, #21]
	_LED_0F[22] = 0xC0; //O
 80001d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000208 <init_fnd+0xbc>)
 80001d6:	22c0      	movs	r2, #192	@ 0xc0
 80001d8:	759a      	strb	r2, [r3, #22]
	_LED_0F[23] = 0x8C; //P
 80001da:	4b0b      	ldr	r3, [pc, #44]	@ (8000208 <init_fnd+0xbc>)
 80001dc:	228c      	movs	r2, #140	@ 0x8c
 80001de:	75da      	strb	r2, [r3, #23]
	_LED_0F[24] = 0x98; //q
 80001e0:	4b09      	ldr	r3, [pc, #36]	@ (8000208 <init_fnd+0xbc>)
 80001e2:	2298      	movs	r2, #152	@ 0x98
 80001e4:	761a      	strb	r2, [r3, #24]
	_LED_0F[25] = 0x92; //S
 80001e6:	4b08      	ldr	r3, [pc, #32]	@ (8000208 <init_fnd+0xbc>)
 80001e8:	2292      	movs	r2, #146	@ 0x92
 80001ea:	765a      	strb	r2, [r3, #25]
	_LED_0F[26] = 0xC1; //U
 80001ec:	4b06      	ldr	r3, [pc, #24]	@ (8000208 <init_fnd+0xbc>)
 80001ee:	22c1      	movs	r2, #193	@ 0xc1
 80001f0:	769a      	strb	r2, [r3, #26]
	_LED_0F[27] = 0x91; //Y
 80001f2:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <init_fnd+0xbc>)
 80001f4:	2291      	movs	r2, #145	@ 0x91
 80001f6:	76da      	strb	r2, [r3, #27]
	_LED_0F[28] = 0xFE; //hight -
 80001f8:	4b03      	ldr	r3, [pc, #12]	@ (8000208 <init_fnd+0xbc>)
 80001fa:	22fe      	movs	r2, #254	@ 0xfe
 80001fc:	771a      	strb	r2, [r3, #28]
}
 80001fe:	bf00      	nop
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	20000028 	.word	0x20000028

0800020c <send>:

void send(uint8_t x)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
	for (int i = 8; i >= 1; i--)
 8000216:	2308      	movs	r3, #8
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	e022      	b.n	8000262 <send+0x56>
	{
		if (x & 0x80)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	da06      	bge.n	8000232 <send+0x26>
		{
			HAL_GPIO_WritePin(PB15_FND_DIO_GPIO_Port, PB15_FND_DIO_Pin, HIGH);
 8000224:	2201      	movs	r2, #1
 8000226:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800022a:	4812      	ldr	r0, [pc, #72]	@ (8000274 <send+0x68>)
 800022c:	f000 fde0 	bl	8000df0 <HAL_GPIO_WritePin>
 8000230:	e005      	b.n	800023e <send+0x32>
		}
		else
		{
			HAL_GPIO_WritePin(PB15_FND_DIO_GPIO_Port, PB15_FND_DIO_Pin, LOW);
 8000232:	2200      	movs	r2, #0
 8000234:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000238:	480e      	ldr	r0, [pc, #56]	@ (8000274 <send+0x68>)
 800023a:	f000 fdd9 	bl	8000df0 <HAL_GPIO_WritePin>
		}
		x <<= 1;
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(PB13_FND_SCLK_GPIO_Port, PB13_FND_SCLK_Pin, LOW);
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800024a:	480a      	ldr	r0, [pc, #40]	@ (8000274 <send+0x68>)
 800024c:	f000 fdd0 	bl	8000df0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PB13_FND_SCLK_GPIO_Port, PB13_FND_SCLK_Pin, HIGH);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000256:	4807      	ldr	r0, [pc, #28]	@ (8000274 <send+0x68>)
 8000258:	f000 fdca 	bl	8000df0 <HAL_GPIO_WritePin>
	for (int i = 8; i >= 1; i--)
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	3b01      	subs	r3, #1
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	2b00      	cmp	r3, #0
 8000266:	dcd9      	bgt.n	800021c <send+0x10>
	}
}
 8000268:	bf00      	nop
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40010c00 	.word	0x40010c00

08000278 <send_port>:

void send_port(uint8_t x, uint8_t port)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	460a      	mov	r2, r1
 8000282:	71fb      	strb	r3, [r7, #7]
 8000284:	4613      	mov	r3, r2
 8000286:	71bb      	strb	r3, [r7, #6]
	send(x);
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	4618      	mov	r0, r3
 800028c:	f7ff ffbe 	bl	800020c <send>
	send(port);
 8000290:	79bb      	ldrb	r3, [r7, #6]
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ffba 	bl	800020c <send>
	HAL_GPIO_WritePin(PB14_FND_RCLK_GPIO_Port, PB14_FND_RCLK_Pin, HIGH);
 8000298:	2201      	movs	r2, #1
 800029a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800029e:	4806      	ldr	r0, [pc, #24]	@ (80002b8 <send_port+0x40>)
 80002a0:	f000 fda6 	bl	8000df0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PB14_FND_RCLK_GPIO_Port, PB14_FND_RCLK_Pin, LOW);
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002aa:	4803      	ldr	r0, [pc, #12]	@ (80002b8 <send_port+0x40>)
 80002ac:	f000 fda0 	bl	8000df0 <HAL_GPIO_WritePin>

}
 80002b0:	bf00      	nop
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	40010c00 	.word	0x40010c00

080002bc <digit2>:
	digit4_show(n, 0, true);
}


void digit2(int n, int port, int replay)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
  int n1, n2;
  n1 = (int)  n % 10;
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	4b22      	ldr	r3, [pc, #136]	@ (8000354 <digit2+0x98>)
 80002cc:	fb83 1302 	smull	r1, r3, r3, r2
 80002d0:	1099      	asrs	r1, r3, #2
 80002d2:	17d3      	asrs	r3, r2, #31
 80002d4:	1ac9      	subs	r1, r1, r3
 80002d6:	460b      	mov	r3, r1
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	440b      	add	r3, r1
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	61bb      	str	r3, [r7, #24]
  n2 = (int) ((n % 100)-n1)/10;
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000358 <digit2+0x9c>)
 80002e6:	fb83 1302 	smull	r1, r3, r3, r2
 80002ea:	1159      	asrs	r1, r3, #5
 80002ec:	17d3      	asrs	r3, r2, #31
 80002ee:	1acb      	subs	r3, r1, r3
 80002f0:	2164      	movs	r1, #100	@ 0x64
 80002f2:	fb01 f303 	mul.w	r3, r1, r3
 80002f6:	1ad3      	subs	r3, r2, r3
 80002f8:	69ba      	ldr	r2, [r7, #24]
 80002fa:	1a9b      	subs	r3, r3, r2
 80002fc:	4a15      	ldr	r2, [pc, #84]	@ (8000354 <digit2+0x98>)
 80002fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000302:	1092      	asrs	r2, r2, #2
 8000304:	17db      	asrs	r3, r3, #31
 8000306:	1ad3      	subs	r3, r2, r3
 8000308:	617b      	str	r3, [r7, #20]

   for(int i = 0; i<=replay; i++){
 800030a:	2300      	movs	r3, #0
 800030c:	61fb      	str	r3, [r7, #28]
 800030e:	e018      	b.n	8000342 <digit2+0x86>
	   send_port(_LED_0F[n1], port);
 8000310:	4a12      	ldr	r2, [pc, #72]	@ (800035c <digit2+0xa0>)
 8000312:	69bb      	ldr	r3, [r7, #24]
 8000314:	4413      	add	r3, r2
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	68ba      	ldr	r2, [r7, #8]
 800031a:	b2d2      	uxtb	r2, r2
 800031c:	4611      	mov	r1, r2
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ffaa 	bl	8000278 <send_port>
	   send_port(_LED_0F[n2], port<<1);
 8000324:	4a0d      	ldr	r2, [pc, #52]	@ (800035c <digit2+0xa0>)
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	4413      	add	r3, r2
 800032a:	781a      	ldrb	r2, [r3, #0]
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	b2db      	uxtb	r3, r3
 8000334:	4619      	mov	r1, r3
 8000336:	4610      	mov	r0, r2
 8000338:	f7ff ff9e 	bl	8000278 <send_port>
   for(int i = 0; i<=replay; i++){
 800033c:	69fb      	ldr	r3, [r7, #28]
 800033e:	3301      	adds	r3, #1
 8000340:	61fb      	str	r3, [r7, #28]
 8000342:	69fa      	ldr	r2, [r7, #28]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	429a      	cmp	r2, r3
 8000348:	dde2      	ble.n	8000310 <digit2+0x54>
   }
}
 800034a:	bf00      	nop
 800034c:	bf00      	nop
 800034e:	3720      	adds	r7, #32
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	66666667 	.word	0x66666667
 8000358:	51eb851f 	.word	0x51eb851f
 800035c:	20000028 	.word	0x20000028

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000366:	f000 fa79 	bl	800085c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036a:	f000 f817 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036e:	f000 f8b1 	bl	80004d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000372:	f000 f84f 	bl	8000414 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000376:	f000 f883 	bl	8000480 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  init_fnd();
 800037a:	f7ff fee7 	bl	800014c <init_fnd>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  for(int i = 0; i<=99; i++){
 800037e:	2300      	movs	r3, #0
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	e007      	b.n	8000394 <main+0x34>

	  digit2(i, 0b0001, 50); //send counter 0-99 with delay 50 cicles int 1st and 2nd view ports
 8000384:	2232      	movs	r2, #50	@ 0x32
 8000386:	2101      	movs	r1, #1
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f7ff ff97 	bl	80002bc <digit2>
	  for(int i = 0; i<=99; i++){
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	3301      	adds	r3, #1
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2b63      	cmp	r3, #99	@ 0x63
 8000398:	ddf4      	ble.n	8000384 <main+0x24>
 800039a:	e7f0      	b.n	800037e <main+0x1e>

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b090      	sub	sp, #64	@ 0x40
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0318 	add.w	r3, r7, #24
 80003a6:	2228      	movs	r2, #40	@ 0x28
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 faaa 	bl	8001904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003be:	2302      	movs	r3, #2
 80003c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c2:	2301      	movs	r3, #1
 80003c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c6:	2310      	movs	r3, #16
 80003c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ce:	f107 0318 	add.w	r3, r7, #24
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 fd24 	bl	8000e20 <HAL_RCC_OscConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003de:	f000 f917 	bl	8000610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	230f      	movs	r3, #15
 80003e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 ff92 	bl	8001324 <HAL_RCC_ClockConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000406:	f000 f903 	bl	8000610 <Error_Handler>
  }
}
 800040a:	bf00      	nop
 800040c:	3740      	adds	r7, #64	@ 0x40
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000418:	4b17      	ldr	r3, [pc, #92]	@ (8000478 <MX_SPI1_Init+0x64>)
 800041a:	4a18      	ldr	r2, [pc, #96]	@ (800047c <MX_SPI1_Init+0x68>)
 800041c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800041e:	4b16      	ldr	r3, [pc, #88]	@ (8000478 <MX_SPI1_Init+0x64>)
 8000420:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000426:	4b14      	ldr	r3, [pc, #80]	@ (8000478 <MX_SPI1_Init+0x64>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800042c:	4b12      	ldr	r3, [pc, #72]	@ (8000478 <MX_SPI1_Init+0x64>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000432:	4b11      	ldr	r3, [pc, #68]	@ (8000478 <MX_SPI1_Init+0x64>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000438:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <MX_SPI1_Init+0x64>)
 800043a:	2200      	movs	r2, #0
 800043c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800043e:	4b0e      	ldr	r3, [pc, #56]	@ (8000478 <MX_SPI1_Init+0x64>)
 8000440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000444:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000446:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <MX_SPI1_Init+0x64>)
 8000448:	2200      	movs	r2, #0
 800044a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800044c:	4b0a      	ldr	r3, [pc, #40]	@ (8000478 <MX_SPI1_Init+0x64>)
 800044e:	2200      	movs	r2, #0
 8000450:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000452:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <MX_SPI1_Init+0x64>)
 8000454:	2200      	movs	r2, #0
 8000456:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000458:	4b07      	ldr	r3, [pc, #28]	@ (8000478 <MX_SPI1_Init+0x64>)
 800045a:	2200      	movs	r2, #0
 800045c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800045e:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <MX_SPI1_Init+0x64>)
 8000460:	220a      	movs	r2, #10
 8000462:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000464:	4804      	ldr	r0, [pc, #16]	@ (8000478 <MX_SPI1_Init+0x64>)
 8000466:	f001 f8eb 	bl	8001640 <HAL_SPI_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000470:	f000 f8ce 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000048 	.word	0x20000048
 800047c:	40013000 	.word	0x40013000

08000480 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000484:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 8000486:	4a12      	ldr	r2, [pc, #72]	@ (80004d0 <MX_USART1_UART_Init+0x50>)
 8000488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800048a:	4b10      	ldr	r3, [pc, #64]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 800048c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000492:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000498:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004a4:	4b09      	ldr	r3, [pc, #36]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 80004a6:	220c      	movs	r2, #12
 80004a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b0:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	@ (80004cc <MX_USART1_UART_Init+0x4c>)
 80004b8:	f001 f946 	bl	8001748 <HAL_UART_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004c2:	f000 f8a5 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200000a0 	.word	0x200000a0
 80004d0:	40013800 	.word	0x40013800

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e8:	4b45      	ldr	r3, [pc, #276]	@ (8000600 <MX_GPIO_Init+0x12c>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a44      	ldr	r2, [pc, #272]	@ (8000600 <MX_GPIO_Init+0x12c>)
 80004ee:	f043 0310 	orr.w	r3, r3, #16
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b42      	ldr	r3, [pc, #264]	@ (8000600 <MX_GPIO_Init+0x12c>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000500:	4b3f      	ldr	r3, [pc, #252]	@ (8000600 <MX_GPIO_Init+0x12c>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a3e      	ldr	r2, [pc, #248]	@ (8000600 <MX_GPIO_Init+0x12c>)
 8000506:	f043 0304 	orr.w	r3, r3, #4
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b3c      	ldr	r3, [pc, #240]	@ (8000600 <MX_GPIO_Init+0x12c>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0304 	and.w	r3, r3, #4
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000518:	4b39      	ldr	r3, [pc, #228]	@ (8000600 <MX_GPIO_Init+0x12c>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a38      	ldr	r2, [pc, #224]	@ (8000600 <MX_GPIO_Init+0x12c>)
 800051e:	f043 0308 	orr.w	r3, r3, #8
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b36      	ldr	r3, [pc, #216]	@ (8000600 <MX_GPIO_Init+0x12c>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0308 	and.w	r3, r3, #8
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000536:	4833      	ldr	r0, [pc, #204]	@ (8000604 <MX_GPIO_Init+0x130>)
 8000538:	f000 fc5a 	bl	8000df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TEST_GPIO_Port, GPIO_TEST_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2108      	movs	r1, #8
 8000540:	4831      	ldr	r0, [pc, #196]	@ (8000608 <MX_GPIO_Init+0x134>)
 8000542:	f000 fc55 	bl	8000df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB15_FND_DIO_Pin|PB14_FND_RCLK_Pin|PB13_FND_SCLK_Pin|PB6_LED1_Pin, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	f24e 0140 	movw	r1, #57408	@ 0xe040
 800054c:	482f      	ldr	r0, [pc, #188]	@ (800060c <MX_GPIO_Init+0x138>)
 800054e:	f000 fc4f 	bl	8000df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8000552:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	2301      	movs	r3, #1
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800055c:	2302      	movs	r3, #2
 800055e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000560:	2303      	movs	r3, #3
 8000562:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	4619      	mov	r1, r3
 800056a:	4826      	ldr	r0, [pc, #152]	@ (8000604 <MX_GPIO_Init+0x130>)
 800056c:	f000 fabc 	bl	8000ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_Pin;
 8000570:	2301      	movs	r3, #1
 8000572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000578:	2301      	movs	r3, #1
 800057a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_SW_GPIO_Port, &GPIO_InitStruct);
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	4619      	mov	r1, r3
 8000582:	4821      	ldr	r0, [pc, #132]	@ (8000608 <MX_GPIO_Init+0x134>)
 8000584:	f000 fab0 	bl	8000ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_TEST_Pin */
  GPIO_InitStruct.Pin = GPIO_TEST_Pin;
 8000588:	2308      	movs	r3, #8
 800058a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	2301      	movs	r3, #1
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000590:	2301      	movs	r3, #1
 8000592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000594:	2303      	movs	r3, #3
 8000596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_TEST_GPIO_Port, &GPIO_InitStruct);
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	4619      	mov	r1, r3
 800059e:	481a      	ldr	r0, [pc, #104]	@ (8000608 <MX_GPIO_Init+0x134>)
 80005a0:	f000 faa2 	bl	8000ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0_TEMP_SET_UP_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SET_UP_Pin;
 80005a4:	2301      	movs	r3, #1
 80005a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PB0_TEMP_SET_UP_GPIO_Port, &GPIO_InitStruct);
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4619      	mov	r1, r3
 80005b6:	4815      	ldr	r0, [pc, #84]	@ (800060c <MX_GPIO_Init+0x138>)
 80005b8:	f000 fa96 	bl	8000ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15_FND_DIO_Pin PB14_FND_RCLK_Pin PB13_FND_SCLK_Pin */
  GPIO_InitStruct.Pin = PB15_FND_DIO_Pin|PB14_FND_RCLK_Pin|PB13_FND_SCLK_Pin;
 80005bc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80005c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ca:	2303      	movs	r3, #3
 80005cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	4619      	mov	r1, r3
 80005d4:	480d      	ldr	r0, [pc, #52]	@ (800060c <MX_GPIO_Init+0x138>)
 80005d6:	f000 fa87 	bl	8000ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6_LED1_Pin */
  GPIO_InitStruct.Pin = PB6_LED1_Pin;
 80005da:	2340      	movs	r3, #64	@ 0x40
 80005dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB6_LED1_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	4619      	mov	r1, r3
 80005f0:	4806      	ldr	r0, [pc, #24]	@ (800060c <MX_GPIO_Init+0x138>)
 80005f2:	f000 fa79 	bl	8000ae8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f6:	bf00      	nop
 80005f8:	3720      	adds	r7, #32
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000
 8000604:	40011000 	.word	0x40011000
 8000608:	40010800 	.word	0x40010800
 800060c:	40010c00 	.word	0x40010c00

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <Error_Handler+0x8>

0800061c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000622:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <HAL_MspInit+0x5c>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4a14      	ldr	r2, [pc, #80]	@ (8000678 <HAL_MspInit+0x5c>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <HAL_MspInit+0x5c>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <HAL_MspInit+0x5c>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a0e      	ldr	r2, [pc, #56]	@ (8000678 <HAL_MspInit+0x5c>)
 8000640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <HAL_MspInit+0x5c>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000652:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <HAL_MspInit+0x60>)
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	4a04      	ldr	r2, [pc, #16]	@ (800067c <HAL_MspInit+0x60>)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	40021000 	.word	0x40021000
 800067c:	40010000 	.word	0x40010000

08000680 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a1b      	ldr	r2, [pc, #108]	@ (8000708 <HAL_SPI_MspInit+0x88>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d12f      	bne.n	8000700 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006a0:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <HAL_SPI_MspInit+0x8c>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a19      	ldr	r2, [pc, #100]	@ (800070c <HAL_SPI_MspInit+0x8c>)
 80006a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b17      	ldr	r3, [pc, #92]	@ (800070c <HAL_SPI_MspInit+0x8c>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b14      	ldr	r3, [pc, #80]	@ (800070c <HAL_SPI_MspInit+0x8c>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a13      	ldr	r2, [pc, #76]	@ (800070c <HAL_SPI_MspInit+0x8c>)
 80006be:	f043 0304 	orr.w	r3, r3, #4
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <HAL_SPI_MspInit+0x8c>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006d0:	23a0      	movs	r3, #160	@ 0xa0
 80006d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d8:	2303      	movs	r3, #3
 80006da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4619      	mov	r1, r3
 80006e2:	480b      	ldr	r0, [pc, #44]	@ (8000710 <HAL_SPI_MspInit+0x90>)
 80006e4:	f000 fa00 	bl	8000ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006e8:	2340      	movs	r3, #64	@ 0x40
 80006ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <HAL_SPI_MspInit+0x90>)
 80006fc:	f000 f9f4 	bl	8000ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40013000 	.word	0x40013000
 800070c:	40021000 	.word	0x40021000
 8000710:	40010800 	.word	0x40010800

08000714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a1c      	ldr	r2, [pc, #112]	@ (80007a0 <HAL_UART_MspInit+0x8c>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d131      	bne.n	8000798 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a1a      	ldr	r2, [pc, #104]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a14      	ldr	r2, [pc, #80]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <HAL_UART_MspInit+0x90>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000764:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000768:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	4619      	mov	r1, r3
 8000778:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <HAL_UART_MspInit+0x94>)
 800077a:	f000 f9b5 	bl	8000ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800077e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	4619      	mov	r1, r3
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <HAL_UART_MspInit+0x94>)
 8000794:	f000 f9a8 	bl	8000ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40013800 	.word	0x40013800
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010800 	.word	0x40010800

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <NMI_Handler+0x4>

080007b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <HardFault_Handler+0x4>

080007bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <MemManage_Handler+0x4>

080007c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fc:	f000 f874 	bl	80008e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */

}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000810:	f7ff fff8 	bl	8000804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000814:	480b      	ldr	r0, [pc, #44]	@ (8000844 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000816:	490c      	ldr	r1, [pc, #48]	@ (8000848 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000818:	4a0c      	ldr	r2, [pc, #48]	@ (800084c <LoopFillZerobss+0x16>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800081c:	e002      	b.n	8000824 <LoopCopyDataInit>

0800081e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000822:	3304      	adds	r3, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000828:	d3f9      	bcc.n	800081e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082a:	4a09      	ldr	r2, [pc, #36]	@ (8000850 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800082c:	4c09      	ldr	r4, [pc, #36]	@ (8000854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000830:	e001      	b.n	8000836 <LoopFillZerobss>

08000832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000834:	3204      	adds	r2, #4

08000836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000838:	d3fb      	bcc.n	8000832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800083a:	f001 f86b 	bl	8001914 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083e:	f7ff fd8f 	bl	8000360 <main>
  bx lr
 8000842:	4770      	bx	lr
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000848:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800084c:	080019a8 	.word	0x080019a8
  ldr r2, =_sbss
 8000850:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000854:	200000ec 	.word	0x200000ec

08000858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_2_IRQHandler>
	...

0800085c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <HAL_Init+0x28>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a07      	ldr	r2, [pc, #28]	@ (8000884 <HAL_Init+0x28>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086c:	2003      	movs	r0, #3
 800086e:	f000 f907 	bl	8000a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000872:	200f      	movs	r0, #15
 8000874:	f000 f808 	bl	8000888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000878:	f7ff fed0 	bl	800061c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40022000 	.word	0x40022000

08000888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <HAL_InitTick+0x54>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <HAL_InitTick+0x58>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800089e:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f911 	bl	8000ace <HAL_SYSTICK_Config>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00e      	b.n	80008d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	d80a      	bhi.n	80008d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008bc:	2200      	movs	r2, #0
 80008be:	6879      	ldr	r1, [r7, #4]
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	f000 f8e7 	bl	8000a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c8:	4a06      	ldr	r2, [pc, #24]	@ (80008e4 <HAL_InitTick+0x5c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e000      	b.n	80008d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000004 	.word	0x20000004

080008e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <HAL_IncTick+0x1c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <HAL_IncTick+0x20>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	4a03      	ldr	r2, [pc, #12]	@ (8000908 <HAL_IncTick+0x20>)
 80008fa:	6013      	str	r3, [r2, #0]
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	20000008 	.word	0x20000008
 8000908:	200000e8 	.word	0x200000e8

0800090c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;
 8000910:	4b02      	ldr	r3, [pc, #8]	@ (800091c <HAL_GetTick+0x10>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	200000e8 	.word	0x200000e8

08000920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000930:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000948:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800094c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000952:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	60d3      	str	r3, [r2, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b04      	ldr	r3, [pc, #16]	@ (8000980 <__NVIC_GetPriorityGrouping+0x18>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	f003 0307 	and.w	r3, r3, #7
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	db0a      	blt.n	80009ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	490c      	ldr	r1, [pc, #48]	@ (80009d0 <__NVIC_SetPriority+0x4c>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	0112      	lsls	r2, r2, #4
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	440b      	add	r3, r1
 80009a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ac:	e00a      	b.n	80009c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4908      	ldr	r1, [pc, #32]	@ (80009d4 <__NVIC_SetPriority+0x50>)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	3b04      	subs	r3, #4
 80009bc:	0112      	lsls	r2, r2, #4
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	440b      	add	r3, r1
 80009c2:	761a      	strb	r2, [r3, #24]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000e100 	.word	0xe000e100
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b089      	sub	sp, #36	@ 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	f1c3 0307 	rsb	r3, r3, #7
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	bf28      	it	cs
 80009f6:	2304      	movcs	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3304      	adds	r3, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d902      	bls.n	8000a08 <NVIC_EncodePriority+0x30>
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3b03      	subs	r3, #3
 8000a06:	e000      	b.n	8000a0a <NVIC_EncodePriority+0x32>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43da      	mvns	r2, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	43d9      	mvns	r1, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	4313      	orrs	r3, r2
         );
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3724      	adds	r7, #36	@ 0x24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a4c:	d301      	bcc.n	8000a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00f      	b.n	8000a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a52:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <SysTick_Config+0x40>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f7ff ff90 	bl	8000984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a64:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <SysTick_Config+0x40>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6a:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <SysTick_Config+0x40>)
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	e000e010 	.word	0xe000e010

08000a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff49 	bl	8000920 <__NVIC_SetPriorityGrouping>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa8:	f7ff ff5e 	bl	8000968 <__NVIC_GetPriorityGrouping>
 8000aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	68b9      	ldr	r1, [r7, #8]
 8000ab2:	6978      	ldr	r0, [r7, #20]
 8000ab4:	f7ff ff90 	bl	80009d8 <NVIC_EncodePriority>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff5f 	bl	8000984 <__NVIC_SetPriority>
}
 8000ac6:	bf00      	nop
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ffb0 	bl	8000a3c <SysTick_Config>
 8000adc:	4603      	mov	r3, r0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b08b      	sub	sp, #44	@ 0x2c
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afa:	e169      	b.n	8000dd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000afc:	2201      	movs	r2, #1
 8000afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	f040 8158 	bne.w	8000dca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	4a9a      	ldr	r2, [pc, #616]	@ (8000d88 <HAL_GPIO_Init+0x2a0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d05e      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b24:	4a98      	ldr	r2, [pc, #608]	@ (8000d88 <HAL_GPIO_Init+0x2a0>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d875      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b2a:	4a98      	ldr	r2, [pc, #608]	@ (8000d8c <HAL_GPIO_Init+0x2a4>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d058      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b30:	4a96      	ldr	r2, [pc, #600]	@ (8000d8c <HAL_GPIO_Init+0x2a4>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d86f      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b36:	4a96      	ldr	r2, [pc, #600]	@ (8000d90 <HAL_GPIO_Init+0x2a8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d052      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b3c:	4a94      	ldr	r2, [pc, #592]	@ (8000d90 <HAL_GPIO_Init+0x2a8>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d869      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b42:	4a94      	ldr	r2, [pc, #592]	@ (8000d94 <HAL_GPIO_Init+0x2ac>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d04c      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b48:	4a92      	ldr	r2, [pc, #584]	@ (8000d94 <HAL_GPIO_Init+0x2ac>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d863      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b4e:	4a92      	ldr	r2, [pc, #584]	@ (8000d98 <HAL_GPIO_Init+0x2b0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d046      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b54:	4a90      	ldr	r2, [pc, #576]	@ (8000d98 <HAL_GPIO_Init+0x2b0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d85d      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b5a:	2b12      	cmp	r3, #18
 8000b5c:	d82a      	bhi.n	8000bb4 <HAL_GPIO_Init+0xcc>
 8000b5e:	2b12      	cmp	r3, #18
 8000b60:	d859      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b62:	a201      	add	r2, pc, #4	@ (adr r2, 8000b68 <HAL_GPIO_Init+0x80>)
 8000b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b68:	08000be3 	.word	0x08000be3
 8000b6c:	08000bbd 	.word	0x08000bbd
 8000b70:	08000bcf 	.word	0x08000bcf
 8000b74:	08000c11 	.word	0x08000c11
 8000b78:	08000c17 	.word	0x08000c17
 8000b7c:	08000c17 	.word	0x08000c17
 8000b80:	08000c17 	.word	0x08000c17
 8000b84:	08000c17 	.word	0x08000c17
 8000b88:	08000c17 	.word	0x08000c17
 8000b8c:	08000c17 	.word	0x08000c17
 8000b90:	08000c17 	.word	0x08000c17
 8000b94:	08000c17 	.word	0x08000c17
 8000b98:	08000c17 	.word	0x08000c17
 8000b9c:	08000c17 	.word	0x08000c17
 8000ba0:	08000c17 	.word	0x08000c17
 8000ba4:	08000c17 	.word	0x08000c17
 8000ba8:	08000c17 	.word	0x08000c17
 8000bac:	08000bc5 	.word	0x08000bc5
 8000bb0:	08000bd9 	.word	0x08000bd9
 8000bb4:	4a79      	ldr	r2, [pc, #484]	@ (8000d9c <HAL_GPIO_Init+0x2b4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d013      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bba:	e02c      	b.n	8000c16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	623b      	str	r3, [r7, #32]
          break;
 8000bc2:	e029      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	623b      	str	r3, [r7, #32]
          break;
 8000bcc:	e024      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	3308      	adds	r3, #8
 8000bd4:	623b      	str	r3, [r7, #32]
          break;
 8000bd6:	e01f      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	330c      	adds	r3, #12
 8000bde:	623b      	str	r3, [r7, #32]
          break;
 8000be0:	e01a      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d102      	bne.n	8000bf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bea:	2304      	movs	r3, #4
 8000bec:	623b      	str	r3, [r7, #32]
          break;
 8000bee:	e013      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d105      	bne.n	8000c04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf8:	2308      	movs	r3, #8
 8000bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69fa      	ldr	r2, [r7, #28]
 8000c00:	611a      	str	r2, [r3, #16]
          break;
 8000c02:	e009      	b.n	8000c18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c04:	2308      	movs	r3, #8
 8000c06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69fa      	ldr	r2, [r7, #28]
 8000c0c:	615a      	str	r2, [r3, #20]
          break;
 8000c0e:	e003      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
          break;
 8000c14:	e000      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          break;
 8000c16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	2bff      	cmp	r3, #255	@ 0xff
 8000c1c:	d801      	bhi.n	8000c22 <HAL_GPIO_Init+0x13a>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	e001      	b.n	8000c26 <HAL_GPIO_Init+0x13e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3304      	adds	r3, #4
 8000c26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	2bff      	cmp	r3, #255	@ 0xff
 8000c2c:	d802      	bhi.n	8000c34 <HAL_GPIO_Init+0x14c>
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	e002      	b.n	8000c3a <HAL_GPIO_Init+0x152>
 8000c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c36:	3b08      	subs	r3, #8
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	210f      	movs	r1, #15
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	6a39      	ldr	r1, [r7, #32]
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	431a      	orrs	r2, r3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 80b1 	beq.w	8000dca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c68:	4b4d      	ldr	r3, [pc, #308]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a4c      	ldr	r2, [pc, #304]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b4a      	ldr	r3, [pc, #296]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c80:	4a48      	ldr	r2, [pc, #288]	@ (8000da4 <HAL_GPIO_Init+0x2bc>)
 8000c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c84:	089b      	lsrs	r3, r3, #2
 8000c86:	3302      	adds	r3, #2
 8000c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	220f      	movs	r2, #15
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a40      	ldr	r2, [pc, #256]	@ (8000da8 <HAL_GPIO_Init+0x2c0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d013      	beq.n	8000cd4 <HAL_GPIO_Init+0x1ec>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a3f      	ldr	r2, [pc, #252]	@ (8000dac <HAL_GPIO_Init+0x2c4>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d00d      	beq.n	8000cd0 <HAL_GPIO_Init+0x1e8>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a3e      	ldr	r2, [pc, #248]	@ (8000db0 <HAL_GPIO_Init+0x2c8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d007      	beq.n	8000ccc <HAL_GPIO_Init+0x1e4>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a3d      	ldr	r2, [pc, #244]	@ (8000db4 <HAL_GPIO_Init+0x2cc>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d101      	bne.n	8000cc8 <HAL_GPIO_Init+0x1e0>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e006      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000cc8:	2304      	movs	r3, #4
 8000cca:	e004      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000ccc:	2302      	movs	r3, #2
 8000cce:	e002      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e000      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cd8:	f002 0203 	and.w	r2, r2, #3
 8000cdc:	0092      	lsls	r2, r2, #2
 8000cde:	4093      	lsls	r3, r2
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ce6:	492f      	ldr	r1, [pc, #188]	@ (8000da4 <HAL_GPIO_Init+0x2bc>)
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	3302      	adds	r3, #2
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d006      	beq.n	8000d0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d00:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	492c      	ldr	r1, [pc, #176]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	608b      	str	r3, [r1, #8]
 8000d0c:	e006      	b.n	8000d1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	43db      	mvns	r3, r3
 8000d16:	4928      	ldr	r1, [pc, #160]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d18:	4013      	ands	r3, r2
 8000d1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d28:	4b23      	ldr	r3, [pc, #140]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	4922      	ldr	r1, [pc, #136]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	60cb      	str	r3, [r1, #12]
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d36:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d38:	68da      	ldr	r2, [r3, #12]
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	491e      	ldr	r1, [pc, #120]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d50:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	4918      	ldr	r1, [pc, #96]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d5e:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	4914      	ldr	r1, [pc, #80]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d021      	beq.n	8000dbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	490e      	ldr	r1, [pc, #56]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	600b      	str	r3, [r1, #0]
 8000d84:	e021      	b.n	8000dca <HAL_GPIO_Init+0x2e2>
 8000d86:	bf00      	nop
 8000d88:	10320000 	.word	0x10320000
 8000d8c:	10310000 	.word	0x10310000
 8000d90:	10220000 	.word	0x10220000
 8000d94:	10210000 	.word	0x10210000
 8000d98:	10120000 	.word	0x10120000
 8000d9c:	10110000 	.word	0x10110000
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40010000 	.word	0x40010000
 8000da8:	40010800 	.word	0x40010800
 8000dac:	40010c00 	.word	0x40010c00
 8000db0:	40011000 	.word	0x40011000
 8000db4:	40011400 	.word	0x40011400
 8000db8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <HAL_GPIO_Init+0x304>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	4909      	ldr	r1, [pc, #36]	@ (8000dec <HAL_GPIO_Init+0x304>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dcc:	3301      	adds	r3, #1
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f47f ae8e 	bne.w	8000afc <HAL_GPIO_Init+0x14>
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	372c      	adds	r7, #44	@ 0x2c
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	40010400 	.word	0x40010400

08000df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	807b      	strh	r3, [r7, #2]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e00:	787b      	ldrb	r3, [r7, #1]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e06:	887a      	ldrh	r2, [r7, #2]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e0c:	e003      	b.n	8000e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e0e:	887b      	ldrh	r3, [r7, #2]
 8000e10:	041a      	lsls	r2, r3, #16
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	611a      	str	r2, [r3, #16]
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e272      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 8087 	beq.w	8000f4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e40:	4b92      	ldr	r3, [pc, #584]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 030c 	and.w	r3, r3, #12
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d00c      	beq.n	8000e66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e4c:	4b8f      	ldr	r3, [pc, #572]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 030c 	and.w	r3, r3, #12
 8000e54:	2b08      	cmp	r3, #8
 8000e56:	d112      	bne.n	8000e7e <HAL_RCC_OscConfig+0x5e>
 8000e58:	4b8c      	ldr	r3, [pc, #560]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e64:	d10b      	bne.n	8000e7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e66:	4b89      	ldr	r3, [pc, #548]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d06c      	beq.n	8000f4c <HAL_RCC_OscConfig+0x12c>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d168      	bne.n	8000f4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e24c      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e86:	d106      	bne.n	8000e96 <HAL_RCC_OscConfig+0x76>
 8000e88:	4b80      	ldr	r3, [pc, #512]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a7f      	ldr	r2, [pc, #508]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	e02e      	b.n	8000ef4 <HAL_RCC_OscConfig+0xd4>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10c      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x98>
 8000e9e:	4b7b      	ldr	r3, [pc, #492]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a7a      	ldr	r2, [pc, #488]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	4b78      	ldr	r3, [pc, #480]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a77      	ldr	r2, [pc, #476]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	e01d      	b.n	8000ef4 <HAL_RCC_OscConfig+0xd4>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ec0:	d10c      	bne.n	8000edc <HAL_RCC_OscConfig+0xbc>
 8000ec2:	4b72      	ldr	r3, [pc, #456]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a71      	ldr	r2, [pc, #452]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	4b6f      	ldr	r3, [pc, #444]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a6e      	ldr	r2, [pc, #440]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	e00b      	b.n	8000ef4 <HAL_RCC_OscConfig+0xd4>
 8000edc:	4b6b      	ldr	r3, [pc, #428]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a6a      	ldr	r2, [pc, #424]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b68      	ldr	r3, [pc, #416]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a67      	ldr	r2, [pc, #412]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ef2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d013      	beq.n	8000f24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efc:	f7ff fd06 	bl	800090c <HAL_GetTick>
 8000f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f02:	e008      	b.n	8000f16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f04:	f7ff fd02 	bl	800090c <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b64      	cmp	r3, #100	@ 0x64
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e200      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f16:	4b5d      	ldr	r3, [pc, #372]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0f0      	beq.n	8000f04 <HAL_RCC_OscConfig+0xe4>
 8000f22:	e014      	b.n	8000f4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fcf2 	bl	800090c <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f2c:	f7ff fcee 	bl	800090c <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b64      	cmp	r3, #100	@ 0x64
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e1ec      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3e:	4b53      	ldr	r3, [pc, #332]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f0      	bne.n	8000f2c <HAL_RCC_OscConfig+0x10c>
 8000f4a:	e000      	b.n	8000f4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d063      	beq.n	8001022 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00b      	beq.n	8000f7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f66:	4b49      	ldr	r3, [pc, #292]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	d11c      	bne.n	8000fac <HAL_RCC_OscConfig+0x18c>
 8000f72:	4b46      	ldr	r3, [pc, #280]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d116      	bne.n	8000fac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f7e:	4b43      	ldr	r3, [pc, #268]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d005      	beq.n	8000f96 <HAL_RCC_OscConfig+0x176>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d001      	beq.n	8000f96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e1c0      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f96:	4b3d      	ldr	r3, [pc, #244]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	4939      	ldr	r1, [pc, #228]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000faa:	e03a      	b.n	8001022 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d020      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb4:	4b36      	ldr	r3, [pc, #216]	@ (8001090 <HAL_RCC_OscConfig+0x270>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fba:	f7ff fca7 	bl	800090c <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc2:	f7ff fca3 	bl	800090c <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e1a1      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f0      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4927      	ldr	r1, [pc, #156]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	600b      	str	r3, [r1, #0]
 8000ff4:	e015      	b.n	8001022 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <HAL_RCC_OscConfig+0x270>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fc86 	bl	800090c <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001004:	f7ff fc82 	bl	800090c <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e180      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001016:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	2b00      	cmp	r3, #0
 800102c:	d03a      	beq.n	80010a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d019      	beq.n	800106a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001036:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <HAL_RCC_OscConfig+0x274>)
 8001038:	2201      	movs	r2, #1
 800103a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103c:	f7ff fc66 	bl	800090c <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001044:	f7ff fc62 	bl	800090c <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e160      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001056:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <HAL_RCC_OscConfig+0x26c>)
 8001058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0f0      	beq.n	8001044 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f000 face 	bl	8001604 <RCC_Delay>
 8001068:	e01c      	b.n	80010a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <HAL_RCC_OscConfig+0x274>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001070:	f7ff fc4c 	bl	800090c <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001076:	e00f      	b.n	8001098 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001078:	f7ff fc48 	bl	800090c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d908      	bls.n	8001098 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e146      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000
 8001090:	42420000 	.word	0x42420000
 8001094:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001098:	4b92      	ldr	r3, [pc, #584]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1e9      	bne.n	8001078 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 80a6 	beq.w	80011fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010b6:	4b8b      	ldr	r3, [pc, #556]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10d      	bne.n	80010de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b88      	ldr	r3, [pc, #544]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a87      	ldr	r2, [pc, #540]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010cc:	61d3      	str	r3, [r2, #28]
 80010ce:	4b85      	ldr	r3, [pc, #532]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010da:	2301      	movs	r3, #1
 80010dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010de:	4b82      	ldr	r3, [pc, #520]	@ (80012e8 <HAL_RCC_OscConfig+0x4c8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d118      	bne.n	800111c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ea:	4b7f      	ldr	r3, [pc, #508]	@ (80012e8 <HAL_RCC_OscConfig+0x4c8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a7e      	ldr	r2, [pc, #504]	@ (80012e8 <HAL_RCC_OscConfig+0x4c8>)
 80010f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010f6:	f7ff fc09 	bl	800090c <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010fe:	f7ff fc05 	bl	800090c <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b64      	cmp	r3, #100	@ 0x64
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e103      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001110:	4b75      	ldr	r3, [pc, #468]	@ (80012e8 <HAL_RCC_OscConfig+0x4c8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d106      	bne.n	8001132 <HAL_RCC_OscConfig+0x312>
 8001124:	4b6f      	ldr	r3, [pc, #444]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4a6e      	ldr	r2, [pc, #440]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6213      	str	r3, [r2, #32]
 8001130:	e02d      	b.n	800118e <HAL_RCC_OscConfig+0x36e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10c      	bne.n	8001154 <HAL_RCC_OscConfig+0x334>
 800113a:	4b6a      	ldr	r3, [pc, #424]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	4a69      	ldr	r2, [pc, #420]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	f023 0301 	bic.w	r3, r3, #1
 8001144:	6213      	str	r3, [r2, #32]
 8001146:	4b67      	ldr	r3, [pc, #412]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	4a66      	ldr	r2, [pc, #408]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 800114c:	f023 0304 	bic.w	r3, r3, #4
 8001150:	6213      	str	r3, [r2, #32]
 8001152:	e01c      	b.n	800118e <HAL_RCC_OscConfig+0x36e>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b05      	cmp	r3, #5
 800115a:	d10c      	bne.n	8001176 <HAL_RCC_OscConfig+0x356>
 800115c:	4b61      	ldr	r3, [pc, #388]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	4a60      	ldr	r2, [pc, #384]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6213      	str	r3, [r2, #32]
 8001168:	4b5e      	ldr	r3, [pc, #376]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	4a5d      	ldr	r2, [pc, #372]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6213      	str	r3, [r2, #32]
 8001174:	e00b      	b.n	800118e <HAL_RCC_OscConfig+0x36e>
 8001176:	4b5b      	ldr	r3, [pc, #364]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	4a5a      	ldr	r2, [pc, #360]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 800117c:	f023 0301 	bic.w	r3, r3, #1
 8001180:	6213      	str	r3, [r2, #32]
 8001182:	4b58      	ldr	r3, [pc, #352]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 8001184:	6a1b      	ldr	r3, [r3, #32]
 8001186:	4a57      	ldr	r2, [pc, #348]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 8001188:	f023 0304 	bic.w	r3, r3, #4
 800118c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d015      	beq.n	80011c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001196:	f7ff fbb9 	bl	800090c <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800119c:	e00a      	b.n	80011b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800119e:	f7ff fbb5 	bl	800090c <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e0b1      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b4:	4b4b      	ldr	r3, [pc, #300]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0ee      	beq.n	800119e <HAL_RCC_OscConfig+0x37e>
 80011c0:	e014      	b.n	80011ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c2:	f7ff fba3 	bl	800090c <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c8:	e00a      	b.n	80011e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ca:	f7ff fb9f 	bl	800090c <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011d8:	4293      	cmp	r3, r2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e09b      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e0:	4b40      	ldr	r3, [pc, #256]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1ee      	bne.n	80011ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d105      	bne.n	80011fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f2:	4b3c      	ldr	r3, [pc, #240]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	4a3b      	ldr	r2, [pc, #236]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 8087 	beq.w	8001316 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001208:	4b36      	ldr	r3, [pc, #216]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	2b08      	cmp	r3, #8
 8001212:	d061      	beq.n	80012d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d146      	bne.n	80012aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800121c:	4b33      	ldr	r3, [pc, #204]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001222:	f7ff fb73 	bl	800090c <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800122a:	f7ff fb6f 	bl	800090c <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e06d      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123c:	4b29      	ldr	r3, [pc, #164]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f0      	bne.n	800122a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001250:	d108      	bne.n	8001264 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001252:	4b24      	ldr	r3, [pc, #144]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	4921      	ldr	r1, [pc, #132]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	4313      	orrs	r3, r2
 8001262:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001264:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a19      	ldr	r1, [r3, #32]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001274:	430b      	orrs	r3, r1
 8001276:	491b      	ldr	r1, [pc, #108]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800127c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001282:	f7ff fb43 	bl	800090c <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128a:	f7ff fb3f 	bl	800090c <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e03d      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x46a>
 80012a8:	e035      	b.n	8001316 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012aa:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <HAL_RCC_OscConfig+0x4cc>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fb2c 	bl	800090c <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b8:	f7ff fb28 	bl	800090c <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e026      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0x498>
 80012d6:	e01e      	b.n	8001316 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69db      	ldr	r3, [r3, #28]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d107      	bne.n	80012f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e019      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40007000 	.word	0x40007000
 80012ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <HAL_RCC_OscConfig+0x500>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	429a      	cmp	r2, r3
 8001302:	d106      	bne.n	8001312 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130e:	429a      	cmp	r2, r3
 8001310:	d001      	beq.n	8001316 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40021000 	.word	0x40021000

08001324 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e0d0      	b.n	80014da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001338:	4b6a      	ldr	r3, [pc, #424]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d910      	bls.n	8001368 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001346:	4b67      	ldr	r3, [pc, #412]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 0207 	bic.w	r2, r3, #7
 800134e:	4965      	ldr	r1, [pc, #404]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001356:	4b63      	ldr	r3, [pc, #396]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d001      	beq.n	8001368 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e0b8      	b.n	80014da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d020      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001380:	4b59      	ldr	r3, [pc, #356]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	4a58      	ldr	r2, [pc, #352]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800138a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001398:	4b53      	ldr	r3, [pc, #332]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4a52      	ldr	r2, [pc, #328]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80013a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a4:	4b50      	ldr	r3, [pc, #320]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	494d      	ldr	r1, [pc, #308]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d040      	beq.n	8001444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d107      	bne.n	80013da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	4b47      	ldr	r3, [pc, #284]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d115      	bne.n	8001402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e07f      	b.n	80014da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d107      	bne.n	80013f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e2:	4b41      	ldr	r3, [pc, #260]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d109      	bne.n	8001402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e073      	b.n	80014da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f2:	4b3d      	ldr	r3, [pc, #244]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e06b      	b.n	80014da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001402:	4b39      	ldr	r3, [pc, #228]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f023 0203 	bic.w	r2, r3, #3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4936      	ldr	r1, [pc, #216]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001414:	f7ff fa7a 	bl	800090c <HAL_GetTick>
 8001418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141a:	e00a      	b.n	8001432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800141c:	f7ff fa76 	bl	800090c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142a:	4293      	cmp	r3, r2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e053      	b.n	80014da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001432:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 020c 	and.w	r2, r3, #12
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	429a      	cmp	r2, r3
 8001442:	d1eb      	bne.n	800141c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001444:	4b27      	ldr	r3, [pc, #156]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d210      	bcs.n	8001474 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001452:	4b24      	ldr	r3, [pc, #144]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 0207 	bic.w	r2, r3, #7
 800145a:	4922      	ldr	r1, [pc, #136]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c0>)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001462:	4b20      	ldr	r3, [pc, #128]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e032      	b.n	80014da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001480:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4916      	ldr	r1, [pc, #88]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d009      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800149e:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	490e      	ldr	r1, [pc, #56]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014b2:	f000 f821 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 80014b6:	4602      	mov	r2, r0
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	490a      	ldr	r1, [pc, #40]	@ (80014ec <HAL_RCC_ClockConfig+0x1c8>)
 80014c4:	5ccb      	ldrb	r3, [r1, r3]
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	4a09      	ldr	r2, [pc, #36]	@ (80014f0 <HAL_RCC_ClockConfig+0x1cc>)
 80014cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <HAL_RCC_ClockConfig+0x1d0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f9d8 	bl	8000888 <HAL_InitTick>

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40022000 	.word	0x40022000
 80014e8:	40021000 	.word	0x40021000
 80014ec:	08001974 	.word	0x08001974
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000004 	.word	0x20000004

080014f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001512:	4b1e      	ldr	r3, [pc, #120]	@ (800158c <HAL_RCC_GetSysClockFreq+0x94>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b04      	cmp	r3, #4
 8001520:	d002      	beq.n	8001528 <HAL_RCC_GetSysClockFreq+0x30>
 8001522:	2b08      	cmp	r3, #8
 8001524:	d003      	beq.n	800152e <HAL_RCC_GetSysClockFreq+0x36>
 8001526:	e027      	b.n	8001578 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001528:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x98>)
 800152a:	613b      	str	r3, [r7, #16]
      break;
 800152c:	e027      	b.n	800157e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	0c9b      	lsrs	r3, r3, #18
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	4a17      	ldr	r2, [pc, #92]	@ (8001594 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d010      	beq.n	8001568 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <HAL_RCC_GetSysClockFreq+0x94>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	0c5b      	lsrs	r3, r3, #17
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	4a11      	ldr	r2, [pc, #68]	@ (8001598 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x98>)
 800155a:	fb03 f202 	mul.w	r2, r3, r2
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	fbb2 f3f3 	udiv	r3, r2, r3
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e004      	b.n	8001572 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a0c      	ldr	r2, [pc, #48]	@ (800159c <HAL_RCC_GetSysClockFreq+0xa4>)
 800156c:	fb02 f303 	mul.w	r3, r2, r3
 8001570:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	613b      	str	r3, [r7, #16]
      break;
 8001576:	e002      	b.n	800157e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001578:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <HAL_RCC_GetSysClockFreq+0x98>)
 800157a:	613b      	str	r3, [r7, #16]
      break;
 800157c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800157e:	693b      	ldr	r3, [r7, #16]
}
 8001580:	4618      	mov	r0, r3
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	007a1200 	.word	0x007a1200
 8001594:	0800198c 	.word	0x0800198c
 8001598:	0800199c 	.word	0x0800199c
 800159c:	003d0900 	.word	0x003d0900

080015a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015a4:	4b02      	ldr	r3, [pc, #8]	@ (80015b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	20000000 	.word	0x20000000

080015b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015b8:	f7ff fff2 	bl	80015a0 <HAL_RCC_GetHCLKFreq>
 80015bc:	4602      	mov	r2, r0
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	0a1b      	lsrs	r3, r3, #8
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	4903      	ldr	r1, [pc, #12]	@ (80015d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ca:	5ccb      	ldrb	r3, [r1, r3]
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40021000 	.word	0x40021000
 80015d8:	08001984 	.word	0x08001984

080015dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015e0:	f7ff ffde 	bl	80015a0 <HAL_RCC_GetHCLKFreq>
 80015e4:	4602      	mov	r2, r0
 80015e6:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	0adb      	lsrs	r3, r3, #11
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	4903      	ldr	r1, [pc, #12]	@ (8001600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015f2:	5ccb      	ldrb	r3, [r1, r3]
 80015f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021000 	.word	0x40021000
 8001600:	08001984 	.word	0x08001984

08001604 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800160c:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <RCC_Delay+0x34>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <RCC_Delay+0x38>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	0a5b      	lsrs	r3, r3, #9
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001620:	bf00      	nop
  }
  while (Delay --);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1e5a      	subs	r2, r3, #1
 8001626:	60fa      	str	r2, [r7, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f9      	bne.n	8001620 <RCC_Delay+0x1c>
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	20000000 	.word	0x20000000
 800163c:	10624dd3 	.word	0x10624dd3

08001640 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e076      	b.n	8001740 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001656:	2b00      	cmp	r3, #0
 8001658:	d108      	bne.n	800166c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001662:	d009      	beq.n	8001678 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
 800166a:	e005      	b.n	8001678 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe fff4 	bl	8000680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2202      	movs	r2, #2
 800169c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016fc:	ea42 0103 	orr.w	r1, r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001704:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	0c1a      	lsrs	r2, r3, #16
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f002 0204 	and.w	r2, r2, #4
 800171e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	69da      	ldr	r2, [r3, #28]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800172e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e042      	b.n	80017e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d106      	bne.n	8001774 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7fe ffd0 	bl	8000714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2224      	movs	r2, #36	@ 0x24
 8001778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800178a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f82b 	bl	80017e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80017a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80017b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80017c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2220      	movs	r2, #32
 80017cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2220      	movs	r2, #32
 80017d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	4313      	orrs	r3, r2
 8001816:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001822:	f023 030c 	bic.w	r3, r3, #12
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	430b      	orrs	r3, r1
 800182e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699a      	ldr	r2, [r3, #24]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a2c      	ldr	r2, [pc, #176]	@ (80018fc <UART_SetConfig+0x114>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d103      	bne.n	8001858 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001850:	f7ff fec4 	bl	80015dc <HAL_RCC_GetPCLK2Freq>
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	e002      	b.n	800185e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001858:	f7ff feac 	bl	80015b4 <HAL_RCC_GetPCLK1Freq>
 800185c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	009a      	lsls	r2, r3, #2
 8001868:	441a      	add	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	fbb2 f3f3 	udiv	r3, r2, r3
 8001874:	4a22      	ldr	r2, [pc, #136]	@ (8001900 <UART_SetConfig+0x118>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	0119      	lsls	r1, r3, #4
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	009a      	lsls	r2, r3, #2
 8001888:	441a      	add	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	fbb2 f2f3 	udiv	r2, r2, r3
 8001894:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <UART_SetConfig+0x118>)
 8001896:	fba3 0302 	umull	r0, r3, r3, r2
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2064      	movs	r0, #100	@ 0x64
 800189e:	fb00 f303 	mul.w	r3, r0, r3
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	3332      	adds	r3, #50	@ 0x32
 80018a8:	4a15      	ldr	r2, [pc, #84]	@ (8001900 <UART_SetConfig+0x118>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018b4:	4419      	add	r1, r3
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	009a      	lsls	r2, r3, #2
 80018c0:	441a      	add	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <UART_SetConfig+0x118>)
 80018ce:	fba3 0302 	umull	r0, r3, r3, r2
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2064      	movs	r0, #100	@ 0x64
 80018d6:	fb00 f303 	mul.w	r3, r0, r3
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	3332      	adds	r3, #50	@ 0x32
 80018e0:	4a07      	ldr	r2, [pc, #28]	@ (8001900 <UART_SetConfig+0x118>)
 80018e2:	fba2 2303 	umull	r2, r3, r2, r3
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	f003 020f 	and.w	r2, r3, #15
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	440a      	add	r2, r1
 80018f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40013800 	.word	0x40013800
 8001900:	51eb851f 	.word	0x51eb851f

08001904 <memset>:
 8001904:	4603      	mov	r3, r0
 8001906:	4402      	add	r2, r0
 8001908:	4293      	cmp	r3, r2
 800190a:	d100      	bne.n	800190e <memset+0xa>
 800190c:	4770      	bx	lr
 800190e:	f803 1b01 	strb.w	r1, [r3], #1
 8001912:	e7f9      	b.n	8001908 <memset+0x4>

08001914 <__libc_init_array>:
 8001914:	b570      	push	{r4, r5, r6, lr}
 8001916:	2600      	movs	r6, #0
 8001918:	4d0c      	ldr	r5, [pc, #48]	@ (800194c <__libc_init_array+0x38>)
 800191a:	4c0d      	ldr	r4, [pc, #52]	@ (8001950 <__libc_init_array+0x3c>)
 800191c:	1b64      	subs	r4, r4, r5
 800191e:	10a4      	asrs	r4, r4, #2
 8001920:	42a6      	cmp	r6, r4
 8001922:	d109      	bne.n	8001938 <__libc_init_array+0x24>
 8001924:	f000 f81a 	bl	800195c <_init>
 8001928:	2600      	movs	r6, #0
 800192a:	4d0a      	ldr	r5, [pc, #40]	@ (8001954 <__libc_init_array+0x40>)
 800192c:	4c0a      	ldr	r4, [pc, #40]	@ (8001958 <__libc_init_array+0x44>)
 800192e:	1b64      	subs	r4, r4, r5
 8001930:	10a4      	asrs	r4, r4, #2
 8001932:	42a6      	cmp	r6, r4
 8001934:	d105      	bne.n	8001942 <__libc_init_array+0x2e>
 8001936:	bd70      	pop	{r4, r5, r6, pc}
 8001938:	f855 3b04 	ldr.w	r3, [r5], #4
 800193c:	4798      	blx	r3
 800193e:	3601      	adds	r6, #1
 8001940:	e7ee      	b.n	8001920 <__libc_init_array+0xc>
 8001942:	f855 3b04 	ldr.w	r3, [r5], #4
 8001946:	4798      	blx	r3
 8001948:	3601      	adds	r6, #1
 800194a:	e7f2      	b.n	8001932 <__libc_init_array+0x1e>
 800194c:	080019a0 	.word	0x080019a0
 8001950:	080019a0 	.word	0x080019a0
 8001954:	080019a0 	.word	0x080019a0
 8001958:	080019a4 	.word	0x080019a4

0800195c <_init>:
 800195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195e:	bf00      	nop
 8001960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001962:	bc08      	pop	{r3}
 8001964:	469e      	mov	lr, r3
 8001966:	4770      	bx	lr

08001968 <_fini>:
 8001968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800196a:	bf00      	nop
 800196c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800196e:	bc08      	pop	{r3}
 8001970:	469e      	mov	lr, r3
 8001972:	4770      	bx	lr
